const nextjsAppRouterBestPractices: string[] = [
  "Use server components by default",
  "Implement client components only when necessary",
  "Utilize the new file-based routing system",
  "Use layout.tsx for shared layouts",
  "Implement loading.js for loading states",
  "Use error.js for error handling",
  "Utilize route handlers for API routes",
];

// Folder structure
const folderStructure = `
app/
  (auth)/
    layout.tsx
    page.tsx
  (dashboard)/
    layout.tsx
    page.tsx
  _components/
  _lib/
  _styles/
  api/
    auth/
      route.ts
    opportunities/
      route.ts
  layout.tsx
  page.tsx
  loading.tsx
  error.tsx
  not-found.tsx
public/
  icons/
  images/
src/
  components/
  hooks/
  lib/
  styles/
next.config.js
middleware.ts
instrumentation.ts
.env
.env.local
.env.development
.env.production
.eslintrc.json
tsconfig.json
`;

// Additional instructions
const additionalInstructions = `
1. Use TypeScript for type safety
2. Implement proper metadata for SEO
3. Utilize Next.js Image component for optimized images
4. Use CSS Modules or Tailwind CSS for styling
5. Implement proper error boundaries
6. Follow Next.js naming conventions for special files
7. Use environment variables for configuration
8. Implement react-query for server state management
9. Use react-query-auth for authentication flows
10. Configure ESLint with @typescript-eslint rules:
    - Enable recommended rules
    - Enable strict type checking
    - Disallow explicit any types
    - Require explicit return types
    - Enforce consistent type imports
    - Disallow unused variables
    - Disallow floating promises
11. Ensure project builds successfully before committing
12. Use pre-commit hooks to enforce linting and type checking
`;

{
  "rules": {
    "nextjsConventions": {
      "bestPractices": [
        "Use route groups for auth/dashboard layouts",
        "Prefix private folders with underscore (e.g. _components)",
        "Implement API routes under app/api/",
        "Use loading.tsx for skeleton screens",
        "Use not-found.tsx for 404 states",
        "Separate server/client components with 'use client' directives"
      ],
      "folderStructure": {
        "required": [
          "app/(auth)/layout.tsx",
          "app/(dashboard)/layout.tsx",
          "app/_components/",
          "app/api/",
          "public/images/",
          "src/components/",
          "src/hooks/",
          "src/lib/",
          "src/styles/"
        ],
        "forbidden": [
          "src/pages/",
          "app/api/route.js",
          "public/assets/",
          "components/*.js"
        ]
      },
      "typeSafety": {
        "required": true,
        "strictNullChecks": true,
        "noImplicitAny": true,
        "eslintRules": [
          "@typescript-eslint/no-explicit-any",
          "@typescript-eslint/no-unused-vars",
          "import/order"
        ]
      }
    },
    "firebase": {
      "securityRules": {
        "storage": "rules_version = '2'",
        "firestore": "rules_version = '2'",
        "authProviders": ["Google", "Email"]
      },
      "emulatorRequirements": [
        "Single project mode",
        "Persistent auth state",
        "Data validation"
      ]
    },
    "testing": {
      "requiredFiles": [
        "jest.config.js",
        "jest.setup.ts",
        "cypress.config.ts"
      ],
      "coverageThresholds": {
        "global": 90,
        "components": 95,
        "hooks": 100
      }
    },
    "mui": {
      "componentPatterns": [
        "Use sx prop for inline styles",
        "Prefer Box over div",
        "Use theme spacing units",
        "Implement custom variants in theme"
      ]
    }
  },
  "autoFix": {
    "onSave": [
      "eslint --fix",
      "prettier --write",
      "tsc --noEmit"
    ],
    "onCommit": [
      "lint-staged",
      "npm run test:ci"
    ]
  }
}