name: BankRewards Daily Collection

on:
  schedule:
    - cron: '0 12 * * *' # Runs daily at 12:00 UTC
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to run against'
        required: true
        default: 'production'

env:
  # Firebase Configuration
  NEXT_PUBLIC_FIREBASE_PROJECT_ID: ${{ secrets.NEXT_PUBLIC_FIREBASE_PROJECT_ID }}
  NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET: ${{ secrets.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET }}
  FIREBASE_SERVICE_ACCOUNT_KEY: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_BASE64 }}
  # Ensure we're not using emulators
  NEXT_PUBLIC_USE_FIREBASE_EMULATORS: 'false'
  # BankRewards specific configuration
  BANKREWARDS_MAX_CONCURRENCY: '2'
  BANKREWARDS_MAX_REQUESTS_PER_MINUTE: '20'
  BANKREWARDS_MAX_RETRIES: '3'
  BANKREWARDS_TIMEOUT_SECS: '30'
  BANKREWARDS_STORAGE_DIR: '/tmp/bankrewards'
  BANKREWARDS_LOG_LEVEL: 'info'

jobs:
  collect-and-store:
    runs-on: ubuntu-latest
    timeout-minutes: 30  # Set a timeout to prevent hung jobs

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18.x
          cache: 'npm'

      - name: Install dependencies
        run: |
          # Only install required dependencies for the scraper
          npm install typescript @types/node firebase-admin playwright cheerio
          npx playwright install --with-deps chromium
        env:
          PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: 1

      - name: Verify Firebase credentials
        run: |
          # Verify FIREBASE_SERVICE_ACCOUNT_KEY is set
          if [ -z "$FIREBASE_SERVICE_ACCOUNT_KEY" ]; then
            echo "Error: FIREBASE_SERVICE_ACCOUNT_KEY is not set"
            exit 1
          fi
          
          # Create a temporary file for verification
          echo "$FIREBASE_SERVICE_ACCOUNT_KEY" | base64 -d > /tmp/service-account.json
          
          # Verify it's valid JSON
          if ! jq empty /tmp/service-account.json 2>/dev/null; then
            echo "Error: FIREBASE_SERVICE_ACCOUNT_KEY is not valid JSON when decoded"
            rm -f /tmp/service-account.json
            exit 1
          fi
          
          # Verify project ID matches
          DECODED_PROJECT_ID=$(jq -r .project_id /tmp/service-account.json)
          if [ "$DECODED_PROJECT_ID" != "$NEXT_PUBLIC_FIREBASE_PROJECT_ID" ]; then
            echo "Error: Project ID mismatch between service account ($DECODED_PROJECT_ID) and NEXT_PUBLIC_FIREBASE_PROJECT_ID ($NEXT_PUBLIC_FIREBASE_PROJECT_ID)"
            rm -f /tmp/service-account.json
            exit 1
          fi
          
          # Clean up
          rm -f /tmp/service-account.json
          echo "Firebase credentials verified successfully"

      - name: Set up TypeScript configuration
        run: |
          echo '{
            "compilerOptions": {
              "target": "ES2020",
              "module": "CommonJS",
              "moduleResolution": "node",
              "esModuleInterop": true,
              "strict": true,
              "skipLibCheck": true,
              "outDir": "dist",
              "baseUrl": ".",
              "paths": {
                "@/*": ["src/*"]
              }
            },
            "include": ["src/**/*"],
            "exclude": ["node_modules"]
          }' > tsconfig.json

      - name: Create environment file
        run: |
          cat > .env << EOL
          NEXT_PUBLIC_FIREBASE_PROJECT_ID=${{ secrets.NEXT_PUBLIC_FIREBASE_PROJECT_ID }}
          NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET=${{ secrets.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET }}
          FIREBASE_SERVICE_ACCOUNT_KEY=${{ secrets.FIREBASE_SERVICE_ACCOUNT_BASE64 }}
          NEXT_PUBLIC_USE_FIREBASE_EMULATORS=false
          NODE_ENV=production
          EOL

      - name: Compile scraper
        run: |
          # Create src directory structure
          mkdir -p dist/src/lib/firebase
          
          # First compile Firebase admin setup
          echo "Compiling Firebase admin setup..."
          npx tsc src/lib/firebase/admin-app.ts --outDir dist
          
          # Then compile scraper files
          echo "Compiling scraper files..."
          npx tsc src/lib/scrapers/bankrewards/collector.ts \
            src/lib/scrapers/bankrewards/crawler.ts \
            src/lib/scrapers/bankrewards/database.ts \
            src/lib/scrapers/bankrewards/transformer.ts \
            --outDir dist

      - name: Run collection script
        run: |
          mkdir -p /tmp/bankrewards
          # Add debug logging
          echo "Debug: Environment variables:"
          env | grep -E "FIREBASE|NEXT" || true
          echo "Debug: Running collector..."
          node --trace-warnings dist/src/lib/scrapers/bankrewards/collector.js
        env:
          NODE_ENV: production
          DEBUG: '*'

      - name: Upload to Firebase Storage
        run: |
          TIMESTAMP=$(date +%Y%m%d_%H%M%S)
          FILENAME="bankrewards_${TIMESTAMP}.json"
          
          if [ -f "/tmp/bankrewards/data.json" ]; then
            echo "Found data file, proceeding with upload..."
            mv /tmp/bankrewards/data.json "./${FILENAME}"
            
            # Create a temporary service account file for the upload
            echo "$FIREBASE_SERVICE_ACCOUNT_KEY" | base64 -d > /tmp/service-account.json
            
            # Use the Admin SDK directly for upload
            node -e "
              const { initializeApp, cert } = require('firebase-admin/app');
              const { getStorage } = require('firebase-admin/storage');
              
              const app = initializeApp({
                credential: cert('/tmp/service-account.json'),
                storageBucket: '${{ secrets.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET }}'
              });
              
              const bucket = getStorage().bucket();
              
              bucket.upload('./${FILENAME}', {
                destination: 'bankrewards/${FILENAME}',
                public: true,
                metadata: {
                  contentType: 'application/json',
                  metadata: {
                    firebaseStorageDownloadTokens: Date.now()
                  }
                }
              }).then(() => {
                console.log('Upload successful');
                process.exit(0);
              }).catch((error) => {
                console.error('Upload failed:', error);
                process.exit(1);
              });
            "
            
            # Clean up service account file
            rm -f /tmp/service-account.json
          else
            echo "Error: Data file not found at /tmp/bankrewards/data.json"
            ls -la /tmp/bankrewards/
            exit 1
          fi

      - name: Cleanup
        if: always()
        run: |
          rm -rf /tmp/bankrewards
          rm -f .env